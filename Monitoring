#####################################################################
#                                                                   #
#                           Monitoring.py                           #
#                     Author: Angelika Kosciolek                    #
#                             05/03/2017                            #
#                                                                   #
#   Description: Real Time graphs using matplotlib for plotting     #
#              input and output voltages and temperature            #
#                                                                   #
#####################################################################

from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from PMBusCall import pmbus
import functools
import numpy as np
from PyQt4 import QtCore
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.use('TkAgg')


class GraphCanvas(FigureCanvas):

    def __init__(self, arg):
        self.current_timer = None
        self.fig = plt.figure()
        self.ax = self.fig.add_subplot(111)
        super(GraphCanvas, self).__init__(self.fig)
        self.timer = QtCore.QTimer()
        self.init_data()
        self.init_figure(arg)
        self.init_timer(arg)

        if pmbus.device == None:
            self.stop_timer()

    def init_timer(self, arg):
        # init timers
        value = functools.partial(self.update_figure, arg)
        if arg == "vin":
            self.timer.timeout.connect(value)
            self.timer.start(100)  # 1 = 1 msec , 1000 = 1 sec
        if arg == "vout":
            self.timer.timeout.connect(value)
            self.timer.start(100)  # 1 = 1 msec , 1000 = 1 sec
        if arg == "temp":
            self.timer.timeout.connect(value)
            self.timer.start(100)  # 1 = 1 msec , 1000 = 1 sec

    def stop_timer(self):
        if self.timer.isActive():
            self.timer.stop()
        else:
            self.timer.start(100)

    def init_data(self):
        # init data
        self.data = [0 for x in range(25)]
        self.t0 = float(self.data[0])

    def init_figure(self, arg):
        font = {
                'weight': 'normal',
                'size': 10,
                }
        plt.grid()
        plt.gcf().subplots_adjust(bottom=0.15)  # give some space for x label
        self.fig.patch.set_facecolor('#DCE4F4')  # set graph background color to transparent
        self.time_axis = np.zeros(25)
        self.y_axis = np.zeros(25)

        if arg == "vin":
            self.ax.set_ylim(0.0, 16.0)
            self.fig.canvas.draw()
            self.line = self.ax.plot(self.time_axis, self.y_axis)
            self.ax.set_xlabel("Time[ms]", font)
            self.ax.set_ylabel("Voltage[V]", font)
        if arg == "vout":
            self.ax.set_ylim(0.0, 3.0)
            self.fig.canvas.draw()
            self.line = self.ax.plot(self.time_axis, self.y_axis)
            self.ax.set_xlabel("Time[ms]", font)
            self.ax.set_ylabel("Voltage[V]", font)
        if arg == "temp":
            self.ax.set_ylim(0, 120)
            self.fig.canvas.draw()
            self.line = self.ax.plot(self.time_axis, self.y_axis)
            self.ax.set_xlabel("Time[ms]", font)
            self.ax.set_ylabel("Temperature[C]", font)

    def update_figure(self, arg):

        if arg == "vin":
            vin_average = pmbus.vin_query_command(pmbus.device, "iq_3f010288")
            self.data = np.append(self.data, vin_average)
        if arg == "vout":
            vout_average = pmbus.vout_query_command(pmbus.device, "iq_3f01028B")
            self.data = np.append(self.data, vout_average)
        if arg == "temp":
            temp_average = pmbus.vin_query_command(pmbus.device, "iq_3f01028E")
            self.data = np.append(self.data, temp_average)

        '''
        # major ticks every 20, minor ticks every 5
        major_ticks = np.arange(len(self.data) - 25, len(self.data), 5)
        minor_ticks = np.arange(len(self.data) - 25, len(self.data), 1)

        self.ax.set_xticks(major_ticks)
        self.ax.set_xticks(minor_ticks, minor=True)
        #self.ax.set_yticks(major_ticks)
        #self.ax.set_yticks(minor_ticks, minor=True)
        self.ax.grid(which='both')
        '''

        current_xaxis = np.arange(len(self.data) - 25, len(self.data), 1)
        self.line[0].set_data(current_xaxis, np.array(self.data[-25:]))
        self.ax.set_xlim(current_xaxis.min(), current_xaxis.max())
        self.fig.canvas.draw()
        self.figure.canvas.flush_events()



